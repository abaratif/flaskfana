[[inputs.logparser]]
  ## file(s) to tail:
  files = ["/var/log/uwsgi/uwsgi.log"]
  from_beginning = true
  name_override = "uwsgi_log"
  ## For parsing logstash-style "grok" patterns:
  [inputs.logparser.grok]
    patterns = ["%{UWSGI_LOG}"]
    custom_patterns = '''
       UWSGI_LOG \[pid: %{NUMBER:pid:int}\|app: %{NUMBER:id:int}\|req: %{NUMBER:currentReq:int}/%{NUMBER:totalReq:int}\] %{IP:remoteAddr} \(%{WORD:remoteUser}?\) \{%{NUMBER:CGIVar:int} vars in %{NUMBER:CGISize:int} bytes\} %{GREEDYDATA:timestamp} %{WORD:method:tag} %{URIPATHPARAM:uri:tag} \=\> generated %{NUMBER:resSize:int} bytes in %{NUMBER:resTime:int} msecs \(HTTP/%{NUMBER:httpVer:float} %{NUMBER:status:int}\) %{NUMBER:headers:int} headers in %{NUMBER:headersSize:int} bytes %{GREEDYDATA:coreInfo}
    '''
[[outputs.influxdb]]
  ## The full HTTP or UDP endpoint URL for your InfluxDB instance.
  urls = ["http://influxsrv:8086"] # This connection shall be accomplished through container linking
  ## The target database for metrics (telegraf will create it if not exists).
  database = "telegraf" # required
  ## Write timeout (for the InfluxDB client), formatted as a string.
  timeout = "5s"
